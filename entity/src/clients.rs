//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use std::str::FromStr;

use crate::model_vec;
use rocket::{form::FromFormField, request::FromParam};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

model_vec!(RedirectUris, String);
model_vec!(Scope, String);

model_vec!(
    ResponseTypes,
    ResponseType {
        Code -> "code",
        Token -> "token"
    }
);
model_vec!(
    GrantTypes,
    GrantType {
        AuthorizationCode -> "authorization_code",
        Password -> "password",
        ClientCredentials -> "client_credentials",
        Implicit -> "implicit",
        RefreshToken -> "refresh_token"
    }
);

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "clients")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub uuid: super::uuid::Uuid,
    pub name: String,
    pub description: Option<String>,
    pub secret: String,
    pub redirect_uris: RedirectUris,
    pub grant_types: GrantTypes,
    pub response_types: ResponseTypes,
    pub scope: Scope,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
